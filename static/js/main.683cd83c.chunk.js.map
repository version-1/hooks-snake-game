{"version":3,"sources":["utils/index.js","components/Field.js","components/Navigation.js","constants/index.js","components/StartButton.js","components/MoveButton.js","hooks/index.js","App.js","index.js"],"names":["fieldSize","Dot","props","className","value","Field","fields","map","row","rowindex","col","colIndex","key","Navigation","state","canUp","canDown","onChangeDifficulty","length","difficulty","upVisiblity","downVisibilty","onClick","DirectionType","up","down","right","left","FieldSize","DefaultDifficulty","IntervalList","StatusType","init","playing","suspended","gameover","StatusText","OppositeDirectionType","DotType","none","snake","food","DirectionTypeDelta","x","y","DirectionKeyCodeMap","37","38","39","40","SnakeStartPosition","Math","round","StartButton","status","onStart","onStop","onRestart","text","constants","tabIndex","MoveButton","handleChangeDirection","getRandomNum","min","max","floor","random","setValue","pos","setValueRandomly","excludes","every","item","getRandomPosition","initFields","dotType","startPos","i","cols","Array","fill","push","snakePos","_isConflict","position","_setValueRandomly","getInitialState","history","tickId","moving","payload","type","restart","start","stop","changeDifficulty","delta","reducer","action","handleMoving","dispatch","direction","newPosition","newHistory","slice","isEatingMe","newFields","newLength","removingPos","handleKeyPress","useSnakeGame","useReducer","useState","tick","setTick","setTimer","setDirection","editable","useMemo","canDifficultyUp","canDifficultyDown","selector","handleChangeDifficulty","useCallback","newDirection","handler","handleStart","handleStop","handleRestart","useEffect","timerId","setInterval","clearInterval","document","removeEventListener","e","keyCode","addEventListener","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.683cd83c.chunk.js","sourcesContent":["export const getRandomNum = (min, max) => {\n  return Math.floor(Math.random() * (max + 1 - min)) + min\n}\n\nexport const getRandomPosition = (fieldSize, excludes) => {\n  while (true) {\n    const pos = {\n      x: getRandomNum(1, fieldSize - 2),\n      y: getRandomNum(1, fieldSize - 2)\n    }\n    const check = excludes.every((item) => pos.x !== item.x || pos.y !== item.y)\n    if (check) {\n      return pos\n    }\n  }\n}\n\nexport const setValue = (fields, pos, value) => {\n  fields[pos.y][pos.x] = value\n  return pos\n}\n\nexport const setValueRandomly = (fieldSize) => (excludes, fields, value) => {\n  const pos = getRandomPosition(fieldSize, excludes)\n  setValue(fields, pos, value)\n  return pos\n}\n\nexport const initFields = (fieldSize, dotType, startPos) => {\n  const fields = []\n  for (let i = 0; i < fieldSize; i++) {\n    const cols = new Array(fieldSize).fill(dotType.none)\n    fields.push(cols)\n  }\n  const snakePos = setValue(fields, startPos, dotType.snake)\n  setValueRandomly(fieldSize)([snakePos], fields, dotType.food)\n  return fields\n}\n\nexport const isConflict = (fieldSize) => (position) =>\n  position.y < 0 ||\n  position.x < 0 ||\n  position.y > fieldSize - 1 ||\n  position.x > fieldSize - 1\n\n\n","import React from 'react'\n\nconst Dot = (props) => <div className={`dots ${props.value}`}></div>\n\nconst Field = (props) => {\n  const { fields } = props\n  return <div className=\"field\">\n    {\n      fields.map((row, rowindex) => {\n      return row.map((col, colIndex) => <Dot\n        key={`${rowindex}-${colIndex}`}\n        value={col}\n          />)\n      })\n    }\n    </div>\n}\n\nexport default Field\n","import React from 'react'\n\nconst Navigation = ({\n  state,\n  canUp,\n  canDown,\n  onChangeDifficulty\n}) => {\n  const { length, difficulty } = state\n\n  const upVisiblity = canUp ? '' : 'is-hidden'\n  const downVisibilty = canDown ? '' : 'is-hidden'\n  const onUpDifficulty = () => onChangeDifficulty(1)\n  const onDownDifficulty = () => onChangeDifficulty(-1)\n  return (\n    <div className=\"navigation\">\n      <div className=\"navigation-item\">\n        <span className=\"navigation-label\">Length: </span>\n        <div className=\"navigation-item-number-container\">\n          <div className=\"num-board\">{length}</div>\n        </div>\n      </div>\n      <div className=\"navigation-item\">\n        <span className=\"navigation-label\">Difficulty: </span>\n        <div className=\"navigation-item-number-container\">\n          <span className=\"num-board\">{difficulty}</span>\n          <div className=\"difficulty-button-container\">\n            <div\n              className={`difficulty-button difficulty-up ${upVisiblity}`}\n              onClick={onUpDifficulty}\n            ></div>\n            <div\n              className={`difficulty-button difficulty-down ${downVisibilty}`}\n              onClick={onDownDifficulty}\n            ></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Navigation\n","\nconst FieldSize = 35\nconst DefaultDifficulty = 3\nconst IntervalList = [500, 300, 100, 50, 10]\n\nconst StatusType = {\n  init: 'init',\n  playing: 'playing',\n  suspended: 'suspended',\n  gameover: 'gameover'\n}\n\nconst StatusText = {\n  init: 'START',\n  playing: 'STOP',\n  gameover: 'GAME OVER',\n  suspended: 'START'\n}\n\nconst DirectionType = {\n  up: 'up',\n  down: 'down',\n  right: 'right',\n  left: 'left'\n}\n\nconst OppositeDirectionType = {\n  up: 'down',\n  down: 'up',\n  right: 'left',\n  left: 'right'\n}\n\nconst DotType = {\n  none: '',\n  snake: 'snake',\n  food: 'food'\n}\n\nconst DirectionTypeDelta = {\n  up: ({ x, y }) => ({ x, y: y - 1 }),\n  down: ({ x, y }) => ({ x, y: y + 1 }),\n  right: ({ x, y }) => ({ x: x + 1, y }),\n  left: ({ x, y }) => ({ x: x - 1, y })\n}\n\nconst DirectionKeyCodeMap = {\n  37: DirectionType.left,\n  38: DirectionType.up,\n  39: DirectionType.right,\n  40: DirectionType.down\n}\n\n// へびの初期表示位置をセット\nconst SnakeStartPosition = {\n  x: Math.round(FieldSize / 2) - 1,\n  y: Math.round(FieldSize / 2) - 1\n}\n\nexport default {\n  FieldSize,\n  DefaultDifficulty,\n  IntervalList,\n  StatusType,\n  StatusText,\n  DirectionType,\n  OppositeDirectionType,\n  DotType,\n  DirectionTypeDelta,\n  DirectionKeyCodeMap,\n  SnakeStartPosition\n}\n","import React from 'react'\nimport constants from '../constants'\n\nconst StartButton = ({ status, onStart, onStop, onRestart }) => {\n  const handleClick = () => {\n    const _onClick = {\n      init: onStart,\n      playing: onStop,\n      gameover: onRestart,\n      suspended: onStart,\n    }\n    _onClick[status]()\n  }\n  const text = constants.StatusText[status]\n  return <div className=\"button-start\">\n    <button className={`btn btn-${status}`} tabIndex={1} onClick={handleClick}>{text}</button>\n  </div>\n}\n\nexport default StartButton\n","import React from 'react'\n\nconst MoveButton = ({ handleChangeDirection }) => {\n  return (\n    <div className=\"move-button\">\n      <button className=\"btn btn-move btn-left\" onClick={() => handleChangeDirection('left')}>←</button>\n      <div className=\"btn-up-down\">\n        <button className=\"btn btn-move btn-up\" onClick={() => handleChangeDirection('up')}>↑</button>\n        <button className=\"btn btn-move btn-down\" onClick={() => handleChangeDirection('down')}>↓</button>\n      </div>\n      <button className=\"btn btn-move btn-right\" onClick={() => handleChangeDirection('right')}>→</button>\n    </div>\n  )\n}\n\nexport default MoveButton\n","import { useCallback, useEffect, useMemo, useState, useReducer } from 'react'\nimport constants from '../constants'\nimport { isConflict, setValue, setValueRandomly, initFields } from '../utils'\n\nconst _isConflict = isConflict(constants.FieldSize)\nconst _setValueRandomly = setValueRandomly(constants.FieldSize)\nconst isEatingMe = (fields, newPosition) => {\n  return fields[newPosition.y][newPosition.x] === constants.DotType.snake\n}\n\nconst getInitialState = () => ({\n  position: constants.SnakeStartPosition,\n  history: [],\n  length: 1,\n  difficulty: constants.DefaultDifficulty,\n  fields: initFields(\n    constants.FieldSize,\n    constants.DotType,\n    constants.SnakeStartPosition\n  ),\n  tickId: null,\n  status: constants.StatusType.init\n})\n\nconst MOVING = 'moving'\nconst START = 'start'\nconst GAMEOVER = 'gameover'\nconst STOP = 'stop'\nconst RESTART = 'restart'\nconst CHANGE_DIFFICULTY = 'changeDifficulty'\n\nconst {\n  moving,\n  restart,\n  gameover,\n  start,\n  stop,\n  changeDifficulty\n} = {\n  moving: (payload) => ({ type: MOVING, payload }),\n  restart: (payload) => ({ type: RESTART, payload }),\n  gameover: () => ({\n    type: GAMEOVER,\n    payload: { status: constants.StatusType.gameover }\n  }),\n  start: () => ({\n    type: START,\n    payload: { status: constants.StatusType.playing }\n  }),\n  stop: () => ({\n    type: STOP,\n    payload: { status: constants.StatusType.suspended }\n  }),\n  changeDifficulty: ({ delta }) => ({\n    type: CHANGE_DIFFICULTY,\n    payload: { delta }\n  })\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case RESTART:\n    case MOVING:\n      return action.payload\n    case GAMEOVER:\n    case START:\n    case STOP:\n      return { ...state, status: action.payload.status }\n    case CHANGE_DIFFICULTY:\n      const { delta } = action.payload\n      if (!constants.IntervalList[state.difficulty - 1 + delta]) {\n        return state\n      }\n      return {\n        ...state,\n        difficulty: state.difficulty + delta\n      }\n    default:\n      return state\n  }\n}\n\nconst handleMoving = (dispatch, direction, state) => {\n  const { length, history, fields, position } = state\n  const newPosition = constants.DirectionTypeDelta[direction](position)\n  const newHistory = [position, ...history].slice(0, length)\n  if (_isConflict(newPosition) || isEatingMe(fields, newPosition)) {\n    return dispatch(\n      gameover({\n        ...state,\n        status: constants.StatusType.gameover,\n        tickId: null\n      })\n    )\n  }\n  // ゲーム続行\n  const newFields = [...fields]\n  let newLength = length\n  if (newFields[newPosition.y][newPosition.x] === constants.DotType.food) {\n    _setValueRandomly(\n      [newPosition, ...newHistory],\n      newFields,\n      constants.DotType.food\n    )\n    newLength = length + 1\n  }\n  const removingPos = newHistory.slice(-1)[0]\n  setValue(newFields, newPosition, constants.DotType.snake)\n  setValue(newFields, removingPos, constants.DotType.none)\n\n  return dispatch(\n    moving({\n      ...state,\n      status: constants.StatusType.playing,\n      history: newHistory,\n      length: newLength,\n      position: newPosition,\n      fields: newFields\n    })\n  )\n}\n\nlet handleKeyPress = null\n\nconst useSnakeGame = () => {\n  const [state, dispatch] = useReducer(reducer, getInitialState())\n  const [tick, setTick] = useState(0)\n  const [, setTimer] = useState()\n  const [direction, setDirection] = useState(constants.DirectionType.up)\n  const { status, difficulty } = state\n\n  const editable = useMemo(() => status === constants.StatusType.init, [status])\n  const canDifficultyUp = useMemo(\n    () => difficulty - 1 < constants.IntervalList.length - 1,\n    [difficulty]\n  )\n  const canDifficultyDown = useMemo(() => difficulty - 1 > 0, [difficulty])\n\n  const selector = {\n    editable,\n    canDifficultyUp,\n    canDifficultyDown\n  }\n\n  const handleStart = () => dispatch(start())\n\n  const handleRestart = () => {\n    setDirection(constants.DirectionType.up)\n    dispatch(restart(getInitialState()))\n  }\n\n  const handleStop = () => dispatch(stop())\n\n  const handleChangeDifficulty = useCallback(\n    (delta) => {\n      if (!editable) {\n        return\n      }\n      dispatch(changeDifficulty({ delta }))\n    },\n    [editable, dispatch]\n  )\n\n  const handleChangeDirection = useCallback(\n    (newDirection) => {\n      if (\n        !constants.DirectionType[newDirection] ||\n        status !== constants.StatusType.playing ||\n        constants.OppositeDirectionType[direction] === newDirection ||\n        direction === newDirection\n      ) {\n        return\n      }\n      setDirection(newDirection)\n    },\n    [direction, status]\n  )\n\n  const handler = {\n    handleChangeDirection,\n    handleChangeDifficulty,\n    handleStart,\n    handleStop,\n    handleRestart\n  }\n\n  useEffect(() => {\n    const timerId = setInterval(() => {\n      setTick((tick) => tick + 1)\n    }, constants.IntervalList[difficulty - 1])\n    setTimer(timerId)\n    return () => {\n      clearInterval(timerId)\n    }\n  }, [difficulty])\n\n  useEffect(() => {\n    if (state.status !== constants.StatusType.playing) {\n      return\n    }\n    handleMoving(dispatch, direction, state)\n  }, [direction, tick, dispatch]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    if (handleKeyPress) {\n      document.removeEventListener('keydown', handleKeyPress)\n    }\n    handleKeyPress = (e) => {\n      const direction = constants.DirectionKeyCodeMap[e.keyCode]\n      handleChangeDirection(direction)\n    }\n    document.addEventListener('keydown', handleKeyPress)\n  }, [handleChangeDirection])\n\n  return [state, handler, selector]\n}\n\nexport default useSnakeGame\n","import React from 'react'\nimport Field from './components/Field'\nimport Navigation from './components/Navigation'\nimport StartButton from './components/StartButton'\nimport MoveButton from './components/MoveButton'\nimport useSnakeGame from './hooks'\n\nconst App = () => {\n  const [state, handler, selector] = useSnakeGame()\n  const { status, fields } = state\n  const { editable, canDifficultyUp, canDifficultyDown } = selector\n  const {\n    handleChangeDifficulty,\n    handleStart,\n    handleRestart,\n    handleStop,\n    handleChangeDirection\n  } = handler\n\n  return (\n    <div className=\"app\">\n      <header className=\"header\">\n        <div className=\"title-container\">\n          <h1 className=\"title\">SNAKE GAME</h1>\n        </div>\n        <Navigation\n          state={state}\n          editable={editable}\n          canUp={canDifficultyUp}\n          canDown={canDifficultyDown}\n          onChangeDifficulty={handleChangeDifficulty}\n        />\n      </header>\n      <main className=\"main\">\n        <Field fields={fields} />\n      </main>\n      <footer className=\"footer\">\n        <StartButton\n          status={status}\n          onStart={handleStart}\n          onRestart={handleRestart}\n          onStop={handleStop}\n        />\n        <MoveButton handleChangeDirection={handleChangeDirection} />\n      </footer>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}